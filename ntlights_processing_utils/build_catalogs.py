# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_build_catalogs.ipynb.

# %% auto 0
__all__ = ['DATA_DB_DIR', 'DB', 'index_on_stem', 'build_item_catalogs', 'refresh_item_catalogs']

# %% ../nbs/02_build_catalogs.ipynb 4
import requests
import json
from fastcore.all import L
import pandas as pd
from typing import Any
from urllib.parse import urlparse
from pathlib import Path
import numpy as np
import re
from shapely.geometry import Polygon, box
import geopandas as gpd
import sqlite3 as sql3
from pandas.io import sql 
import sqlalchemy as sqalc

# %% ../nbs/02_build_catalogs.ipynb 5
from .catalogs import *
from .items import *

# %% ../nbs/02_build_catalogs.ipynb 8
DATA_DB_DIR = '../data/sqlite'
DB = f'{DATA_DB_DIR}/db.db'

# %% ../nbs/02_build_catalogs.ipynb 11
def build_item_catalogs(catalogs, conn, show=False):
    for i in range(len(catalogs)):
        monthly = catalogs.iloc[i]
        href, folder, baseurl = monthly.href, monthly.folder, monthly.baseurl
        items = get_monthly_items(href, folder, baseurl)
        count = items.to_sql('catalog_items', conn, index=False, if_exists='append', method='multi')
        if show: print(f'{i} rows added: {count}')
         

# %% ../nbs/02_build_catalogs.ipynb 13
index_on_stem = '''
  create index stem_index on catalog_items(stem);
'''

# %% ../nbs/02_build_catalogs.ipynb 14
def refresh_item_catalogs(limit=None, verbose=False):
    catalogs = get_item_catalogs()
    conn = sql3.connect(DB)
    conn.executescript('drop table if exists catalog_items;')
    if limit is not None:
        catalogs = catalogs.iloc[:limit]
    build_item_catalogs(catalogs,conn,show=verbose)
    cursor = conn.cursor()
    cursor.execute(index_on_stem)
    
    conn.close()
