[
  {
    "objectID": "catalogs.html",
    "href": "catalogs.html",
    "title": "Catalogs",
    "section": "",
    "text": "get_data\n\n get_data (url:str, headers:dict={})\n\n\ndata = get_data(VIIRS_LINK)\n\nCPU times: user 40.8 ms, sys: 2.1 ms, total: 42.9 ms\nWall time: 1.52 s\n\n\n\nassert 'links' in data\n\n\n\n\nmake_df\n\n make_df (data, rel)\n\n\ndf = make_df(data,rel='child')\n\n\nassert set(['href','rel','type']) == set(df.columns.values)\n\n\nassert len(df) == 105\n\n\n\n\nparse_folder\n\n parse_folder (href)\n\n\nassert parse_folder('https://globalnightlight.s3.amazonaws.com/201204/201204_catalog.json') == '201204'\nassert parse_folder('https://globalnightlight.s3.amazonaws.com/npp_202012/npp_202012_catalog.json') == 'npp_202012'\n\n\n\n\nparse_yearmonth\n\n parse_yearmonth (folder)\n\n\nassert parse_yearmonth('201204') == '201204'\nassert parse_yearmonth('npp_202012') == '202012'\n\n\n\n\nparse_baseurl\n\n parse_baseurl (href)\n\n\nassert parse_baseurl('https://globalnightlight.s3.amazonaws.com/npp_202012/npp_202012_catalog.json') == 'https://globalnightlight.s3.amazonaws.com'\n\n\n\n\ntransform_kids_df\n\n transform_kids_df (kids_df)\n\n\ndf = transform_kids_df(df)\n\n\nassert set(['href','folder','baseurl','yearmonth']) == set(df.columns.values)\n\n\n\n\nget_item_catalogs\n\n get_item_catalogs (link:str=None, rel:str='child')\n\n\ncatalogs = get_item_catalogs()\n\nCPU times: user 43.1 ms, sys: 4.96 ms, total: 48 ms\nWall time: 1.42 s\n\n\n\nassert len(catalogs) == 105\n\n\nassert set(['href','folder','baseurl','yearmonth']) == set(catalogs.columns.values)"
  },
  {
    "objectID": "download_rasters.html",
    "href": "download_rasters.html",
    "title": "Download Rasters",
    "section": "",
    "text": "phl_matched20180501 = search_dates_aoi(aoi, date_param='20180501')\n\nCPU times: user 44.3 ms, sys: 986 ms, total: 1.03 s\nWall time: 1.03 s\n\n\n\nsorted_results = compute_overlaps(aoi,phl_matched20180501)\n\nCPU times: user 56.6 ms, sys: 2.6 ms, total: 59.2 ms\nWall time: 55.6 ms\n\n\n\ncfg = Config('../data/ntlights-bigfiles','ntlights.ini',save=False)\nfdownload = FastDownload(cfg, base='../data/ntlights-bigfiles',archive=folder)\n\n\nfolder, vflag_href, image_href = sorted_results.iloc[0].folder, sorted_results.iloc[0].vflag_href, sorted_results.iloc[0].asset_href\n\n\nfdownload.download(vflag_href)\n\n\n\n\n\n\n    \n      \n      100.09% [4456448/4452282 00:03<00:00]\n    \n    \n\n\nPath('/home/butch2/play/devpost/ntlights-processing-utils/nbs/../data/ntlights-bigfiles/npp_201805/npp_d20180501_t1639558_e1645362_b33728.vflag.co.tif')\n\n\n\n\nget_path_column\n\n get_path_column (raster_type)\n\n\n\n\nget_href_path\n\n get_href_path (o, raster_type)\n\n\n\n\ndownload_path_column\n\n download_path_column (o, raster_type, dest)\n\n\n\n\ndownload_items\n\n download_items (items_df, dest='data', raster_type='rade9.co.tif')\n\n\ntop2_items = sorted_results[:2].copy()\n\n\ntop2_items = download_items(top2_items, dest='../data/ntlights-bigfiles')\n\n\ntop2_items.columns.values\n\narray(['href', 'item_href', 'stem', 'suffix', 'base_url', 'folder',\n       'product_id', 'start_date', 'first_scantime', 'end_scantime',\n       'orbital_nbr', 'create_datetime', 'data_origin', 'data_domain',\n       'vflag_file', 'vflag_href', 'cache_stem', 'asset_href', 'geometry',\n       'section_area', 'intersect_area_sum', 'pct_covered', 'image_path'],\n      dtype=object)"
  },
  {
    "objectID": "build_catalogs.html",
    "href": "build_catalogs.html",
    "title": "Build Catalogs",
    "section": "",
    "text": "build_item_catalogs\n\n build_item_catalogs (catalogs, conn, show=False)\n\n\ncreate_catalog_items_sql = '''\nCREATE TABLE IF NOT EXISTS \"catalog_items\" (                                                                                \n  \"href\" TEXT,                                                                                                                 \n  \"base_url\" TEXT,\n  \"folder\" TEXT,\n  \"product_id\" TEXT,\n  \"start_date\" TEXT,\n  \"first_scantime\" TEXT,\n  \"end_scantime\" TEXT,\n  \"orbital_nbr\" TEXT,\n  \"create_datetime\" TEXT,\n  \"data_origin\" TEXT,\n  \"data_domain\" TEXT,\n  \"vflag_file\" TEXT,\n  \"vflag_href\" TEXT\n);\n'''\n\n\n\n\nrefresh_item_catalogs\n\n refresh_item_catalogs (limit=None, verbose=False)"
  },
  {
    "objectID": "fetch_coords.html",
    "href": "fetch_coords.html",
    "title": "Fetch Coords",
    "section": "",
    "text": "get_coords\n\n get_coords (href, stem)\n\n\nstem = 'SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops'\n\n\nhref = 'https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops.rade9.co.json'\n\n\nrow = get_coords(href,stem)\n\nCPU times: user 41.9 ms, sys: 0 ns, total: 41.9 ms\nWall time: 1.27 s\n\n\n\nrow\n\n{'stem': 'SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops',\n 'asset_href': 'https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops.rade9.co.tif',\n 'geometry': <shapely.geometry.polygon.Polygon>}\n\n\n\ndate_param = '20180501'\n\n\nif '%' in date_param:\n    query = f'select * from catalog_items where start_date like \"{date_param}\"'\nelse:\n    query = f'select * from catalog_items where start_date = \"{date_param}\"'\n\n\nconn = sql3.connect(DB)\n\n\nitems_df = pd.read_sql_query(query,conn,dtype=str)\n\nCPU times: user 719 ms, sys: 791 ms, total: 1.51 s\nWall time: 10.2 s\n\n\n\nitems_df.columns.values\n\narray(['href', 'item_href', 'stem', 'suffix', 'base_url', 'folder',\n       'product_id', 'start_date', 'first_scantime', 'end_scantime',\n       'orbital_nbr', 'create_datetime', 'data_origin', 'data_domain',\n       'vflag_file', 'vflag_href'], dtype=object)\n\n\n\nitems_df.head()\n\n\n\n\n\n  \n    \n      \n      href\n      item_href\n      stem\n      suffix\n      base_url\n      folder\n      product_id\n      start_date\n      first_scantime\n      end_scantime\n      orbital_nbr\n      create_datetime\n      data_origin\n      data_domain\n      vflag_file\n      vflag_href\n    \n  \n  \n    \n      0\n      ./SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522...\n      SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      0004098\n      0009502\n      33718\n      20180501060951522600\n      noac\n      ops\n      npp_d20180501_t0004098_e0009502_b33718.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t0004098_e0009502_b33718.vflag.co.tif\n    \n    \n      1\n      ./SVDNB_npp_d20180501_t0009514_e0015318_b33718_c20180501061532603366_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t0009514_e0015318_b33718_c20180501061532603...\n      SVDNB_npp_d20180501_t0009514_e0015318_b33718_c20180501061532603366_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      0009514\n      0015318\n      33718\n      20180501061532603366\n      noac\n      ops\n      npp_d20180501_t0009514_e0015318_b33718.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t0009514_e0015318_b33718.vflag.co.tif\n    \n    \n      2\n      ./SVDNB_npp_d20180501_t0112274_e0118078_b33719_c20180501071808369542_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t0112274_e0118078_b33719_c20180501071808369...\n      SVDNB_npp_d20180501_t0112274_e0118078_b33719_c20180501071808369542_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      0112274\n      0118078\n      33719\n      20180501071808369542\n      noac\n      ops\n      npp_d20180501_t0112274_e0118078_b33719.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t0112274_e0118078_b33719.vflag.co.tif\n    \n    \n      3\n      ./SVDNB_npp_d20180501_t0118090_e0123494_b33719_c20180501072349439701_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t0118090_e0123494_b33719_c20180501072349439...\n      SVDNB_npp_d20180501_t0118090_e0123494_b33719_c20180501072349439701_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      0118090\n      0123494\n      33719\n      20180501072349439701\n      noac\n      ops\n      npp_d20180501_t0118090_e0123494_b33719.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t0118090_e0123494_b33719.vflag.co.tif\n    \n    \n      4\n      ./SVDNB_npp_d20180501_t0123507_e0129293_b33719_c20180501072930507231_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t0123507_e0129293_b33719_c20180501072930507...\n      SVDNB_npp_d20180501_t0123507_e0129293_b33719_c20180501072930507231_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      0123507\n      0129293\n      33719\n      20180501072930507231\n      noac\n      ops\n      npp_d20180501_t0123507_e0129293_b33719.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t0123507_e0129293_b33719.vflag.co.tif\n    \n  \n\n\n\n\n\n\n\nget_rows\n\n get_rows (items_df)\n\n\nrows = get_rows(items_df)\n\nCPU times: user 4.06 s, sys: 0 ns, total: 4.06 s\nWall time: 2min 49s\n\n\n\nrows_df = pd.DataFrame.from_records(rows)\n\n\nrows_df.columns.values\n\narray(['stem', 'asset_href', 'geometry'], dtype=object)\n\n\n\nrows_df.dtypes\n\nstem          object\nasset_href    object\ngeometry      object\ndtype: object\n\n\n\nrows_gdf = gpd.GeoDataFrame(rows_df, geometry='geometry', crs='EPSG:4326')\n\n\nrows_wkt  = rows_gdf.to_wkt()\n\n\nrows_wkt.dtypes\n\nstem          object\nasset_href    object\ngeometry      object\ndtype: object\n\n\n\n# conn.executescript(drop_coords_cache_sql);\n\n\n# conn.executescript(create_coords_cache_sql);\n\n\n# %%time\n#| eval: false\n\n# row_count = rows_wkt.to_sql('coords_cache', conn, if_exists='append', index=False, method='multi')\n\n\n\n\nadd_cache_coords\n\n add_cache_coords (items_df, cache_table='coords_cache')\n\n\n\n\nfetch_cached_coordinates\n\n fetch_cached_coordinates (date_param=None, criteria=None)\n\n\ncached_df = fetch_cached_coordinates('20180501')\n\nCPU times: user 44.8 ms, sys: 108 ms, total: 152 ms\nWall time: 151 ms\n\n\n\nassert len(cached_df[cached_df.cache_stem == 'NA']) == 0\n\n\ncached_df2 = fetch_cached_coordinates('20121015')\n\nCPU times: user 23.6 ms, sys: 96.9 ms, total: 121 ms\nWall time: 121 ms\n\n\n\nassert len(cached_df2[cached_df2.stem == cached_df2.cache_stem]) == 0\n\n\n\n\nsearch_and_cache_dates\n\n search_and_cache_dates (date_param=None, criteria=None)\n\n\njoined_df = search_and_cache_dates(date_param='20180501')\n\nCPU times: user 31.9 ms, sys: 87.8 ms, total: 120 ms\nWall time: 119 ms\n\n\n\n\n\nconvert_joined_gdf\n\n convert_joined_gdf (joined_df, crs='EPSG:4326')\n\n\njoined_gdf = convert_joined_gdf(joined_df)\n\n\naoi = gpd.read_file('../data/admin_areas/ph_admin_bbox_wgs84.geojson')\n\n\nax = plt.axes()\nax = joined_gdf.plot(ax=ax, facecolor='none', edgecolor='blue')\nax = aoi.plot(ax=ax,color='red')\n\nCPU times: user 290 ms, sys: 2.82 ms, total: 293 ms\nWall time: 234 ms\n\n\n\n\n\n\nfiltered_gdf = joined_gdf.sjoin(aoi,how='inner',predicate='intersects')\n\n\nfiltered_gdf.drop(columns='index_right',inplace=True)\n\n\n\n\nsearch_dates_aoi\n\n search_dates_aoi (aoi:geopandas.geodataframe.GeoDataFrame,\n                   date_param:str=None, criteria:str=None,\n                   crs='EPSG:4326')\n\n\nphl_matched20180501 = search_dates_aoi(aoi, date_param='20180501')\n\nCPU times: user 73.6 ms, sys: 104 ms, total: 178 ms\nWall time: 177 ms"
  },
  {
    "objectID": "eval_overlap.html",
    "href": "eval_overlap.html",
    "title": "Evaluate Overlaps",
    "section": "",
    "text": "phl_matched20180501 = search_dates_aoi(aoi, date_param='20180501')\n\nCPU times: user 866 ms, sys: 613 ms, total: 1.48 s\nWall time: 10.2 s\n\n\n\nphl_matched_planar = phl_matched20180501.to_crs('EPSG:3857')\nphl_matched_planar['section_area'] = phl_matched_planar.geometry.area\n\n\nresults = azs.create_area_zonal_stats(phl_matched_planar, aoi_planar, aggregations=[])\n\nCPU times: user 48.9 ms, sys: 0 ns, total: 48.9 ms\nWall time: 49.2 ms\n\n\n\nresults.head()\n\n\n\n\n\n  \n    \n      \n      href\n      item_href\n      stem\n      suffix\n      base_url\n      folder\n      product_id\n      start_date\n      first_scantime\n      end_scantime\n      ...\n      create_datetime\n      data_origin\n      data_domain\n      vflag_file\n      vflag_href\n      cache_stem\n      asset_href\n      geometry\n      section_area\n      intersect_area_sum\n    \n  \n  \n    \n      80\n      ./SVDNB_npp_d20180501_t1634142_e1639546_b33728...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1634142_e1639546_b33728_c...\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1634142\n      1639546\n      ...\n      20180501223954897862\n      noac\n      ops\n      npp_d20180501_t1634142_e1639546_b33728.vflag.c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1634142_e1639546_b33728_c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      POLYGON ((13246796.765 2155183.158, 13246796.7...\n      1.437277e+13\n      2.127466e+11\n    \n    \n      81\n      ./SVDNB_npp_d20180501_t1639558_e1645362_b33728...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1639558_e1645362_b33728_c...\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1639558\n      1645362\n      ...\n      20180501224536066966\n      noac\n      ops\n      npp_d20180501_t1639558_e1645362_b33728.vflag.c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1639558_e1645362_b33728_c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      POLYGON ((12912838.293 229.689, 12912838.293 2...\n      1.088441e+13\n      2.237799e+12\n    \n    \n      82\n      ./SVDNB_npp_d20180501_t1645375_e1651161_b33728...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1645375_e1651161_b33728_c...\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1645375\n      1651161\n      ...\n      20180501225118045996\n      noac\n      ops\n      npp_d20180501_t1645375_e1651161_b33728.vflag.c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1645375_e1651161_b33728_c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      POLYGON ((12356240.839 -2272782.155, 12356240....\n      1.039730e+13\n      6.358422e+10\n    \n    \n      89\n      ./SVDNB_npp_d20180501_t1816398_e1822184_b33729...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1816398_e1822184_b33729_c...\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1816398\n      1822184\n      ...\n      20180502002220226537\n      noac\n      ops\n      npp_d20180501_t1816398_e1822184_b33729.vflag.c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1816398_e1822184_b33729_c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      POLYGON ((10463798.364 1804965.959, 10463798.3...\n      1.321192e+13\n      8.253388e+11\n    \n    \n      90\n      ./SVDNB_npp_d20180501_t1822196_e1828000_b33729...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1822196_e1828000_b33729_c...\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1822196\n      1828000\n      ...\n      20180502002801307723\n      noac\n      ops\n      npp_d20180501_t1822196_e1828000_b33729.vflag.c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      SVDNB_npp_d20180501_t1822196_e1828000_b33729_c...\n      https://globalnightlight.s3.amazonaws.com/npp_...\n      POLYGON ((10018520.400 -333881.539, 10018520.4...\n      1.045368e+13\n      1.839721e+12\n    \n  \n\n5 rows × 21 columns\n\n\n\n\naoi_planar\n\n\n\n\n\n  \n    \n      \n      geometry\n      bound_area\n    \n  \n  \n    \n      0\n      POLYGON ((14093600.302 511201.726, 14093600.30...\n      2.600698e+12\n    \n  \n\n\n\n\n\ntot_aoi_area = aoi_planar.bound_area.sum(); tot_aoi_area\nresults['pct_covered'] = results['intersect_area_sum'] / tot_aoi_area \nsorted_results = results.sort_values(by='pct_covered',ascending=False)\nsorted_results\n\n\n\ncompute_overlaps\n\n compute_overlaps (aoi, matched_results)\n\n\nsorted_results = compute_overlaps(aoi,phl_matched20180501)\n\nCPU times: user 37.2 ms, sys: 6.45 ms, total: 43.6 ms\nWall time: 41.8 ms\n\n\n\nsorted_results[['pct_covered']].head()\n\n\n\n\n\n  \n    \n      \n      pct_covered\n    \n  \n  \n    \n      81\n      0.860461\n    \n    \n      90\n      0.707395\n    \n    \n      89\n      0.317353\n    \n    \n      80\n      0.081804\n    \n    \n      82\n      0.024449\n    \n  \n\n\n\n\n\naoi_ph = gpd.read_file('../data/admin_areas/phl_admbnda_adm3_psa_namria_20200529.shp')\naoi_ph_planar = aoi_ph.to_crs('EPSG:3857')\nax = plt.axes()\nax = sorted_results[:2].plot(ax=ax, facecolor='none', edgecolor='blue')\nax = aoi_ph_planar.plot(ax=ax,color='red')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Nightlights for Damage Assessment Nightlights Processing Utilities",
    "section": "",
    "text": "pip install git+https://github.com/butchland/ntlights-processing-utils.git"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "Nightlights for Damage Assessment Nightlights Processing Utilities",
    "section": "How to use",
    "text": "How to use\n\nDownload the nightlights satellite imagery for the period before and after the disaster\nDownload the geospatial admin boundaries for the areas concerned\nDownload and scrape the damage assessment situationers as ground truth\nPreprocess the situationrers to extract the locations and damage assessment\nWrangle and link the damage assessment locations to the admin boundaries\nExtract the radiance data from the nightlights satellite\nAnalyze the patterns for radiance data for highly damaged areas vs undamaged or low damage areas\nWrite up conclusions\n\n\nQuery what images are relevant for what dates and what areas\n\nFetch monthly catalogs of VIIRS NDB night lights imagery (2012-2020)\nCreate a searchable database of images for each day of all the night lights images\nCreate an API to search and filter images by date and area boundary (as well as cache! the metadata)\nCreate an API to evaluate overlap of images to area boundary\nCreate an API to download selected images\n\nLets start with an GeoDataFrame that is the bounding box of the AOI (Philippines)\n\naoi = gpd.read_file('../data/admin_areas/ph_admin_bbox_wgs84.geojson')\n\nLets search for images overlapping the AOI for a particular date, in this case 20180501 or May 1, 2018\n\nmatched = search_dates_aoi(aoi, date_param='20180501')\n\nCPU times: user 79.7 ms, sys: 60.1 ms, total: 140 ms\nWall time: 137 ms\n\n\nNotice how fast the retrieval is – that’s because the particular date has already been cached.\n\nFor dates that haven’t been cached, the time can take between 10-15 minutes, depending on the internet speed.\n\n\nlen(matched)\n\n5\n\n\nThere are 5 images for the date that overlaps the AOI, but which ones are the most relevant?\n\nmatched\n\n\n\n\n\n  \n    \n      \n      href\n      item_href\n      stem\n      suffix\n      base_url\n      folder\n      product_id\n      start_date\n      first_scantime\n      end_scantime\n      orbital_nbr\n      create_datetime\n      data_origin\n      data_domain\n      vflag_file\n      vflag_href\n      cache_stem\n      asset_href\n      geometry\n    \n  \n  \n    \n      80\n      ./SVDNB_npp_d20180501_t1634142_e1639546_b33728_c20180501223954897862_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1634142_e1639546_b33728_c20180501223954897...\n      SVDNB_npp_d20180501_t1634142_e1639546_b33728_c20180501223954897862_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1634142\n      1639546\n      33728\n      20180501223954897862\n      noac\n      ops\n      npp_d20180501_t1634142_e1639546_b33728.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t1634142_e1639546_b33728.vflag.co.tif\n      SVDNB_npp_d20180501_t1634142_e1639546_b33728_c20180501223954897862_noac_ops\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1634142_e1639546_b33728_c20180501223954897...\n      POLYGON ((118.99800 19.00210, 118.99800 44.00210, 157.99800 44.00210, 157.99800 19.00210, 118.99800 19.00210))\n    \n    \n      81\n      ./SVDNB_npp_d20180501_t1639558_e1645362_b33728_c20180501224536066966_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1639558_e1645362_b33728_c20180501224536066...\n      SVDNB_npp_d20180501_t1639558_e1645362_b33728_c20180501224536066966_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1639558\n      1645362\n      33728\n      20180501224536066966\n      noac\n      ops\n      npp_d20180501_t1639558_e1645362_b33728.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t1639558_e1645362_b33728.vflag.co.tif\n      SVDNB_npp_d20180501_t1639558_e1645362_b33728_c20180501224536066966_noac_ops\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1639558_e1645362_b33728_c20180501224536066...\n      POLYGON ((115.99800 0.00206, 115.99800 25.00210, 149.99800 25.00210, 149.99800 0.00206, 115.99800 0.00206))\n    \n    \n      82\n      ./SVDNB_npp_d20180501_t1645375_e1651161_b33728_c20180501225118045996_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1645375_e1651161_b33728_c20180501225118045...\n      SVDNB_npp_d20180501_t1645375_e1651161_b33728_c20180501225118045996_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1645375\n      1651161\n      33728\n      20180501225118045996\n      noac\n      ops\n      npp_d20180501_t1645375_e1651161_b33728.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t1645375_e1651161_b33728.vflag.co.tif\n      SVDNB_npp_d20180501_t1645375_e1651161_b33728_c20180501225118045996_noac_ops\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1645375_e1651161_b33728_c20180501225118045...\n      POLYGON ((110.99800 -19.99790, 110.99800 5.00208, 143.99800 5.00208, 143.99800 -19.99790, 110.99800 -19.99790))\n    \n    \n      89\n      ./SVDNB_npp_d20180501_t1816398_e1822184_b33729_c20180502002220226537_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1816398_e1822184_b33729_c20180502002220226...\n      SVDNB_npp_d20180501_t1816398_e1822184_b33729_c20180502002220226537_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1816398\n      1822184\n      33729\n      20180502002220226537\n      noac\n      ops\n      npp_d20180501_t1816398_e1822184_b33729.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t1816398_e1822184_b33729.vflag.co.tif\n      SVDNB_npp_d20180501_t1816398_e1822184_b33729_c20180502002220226537_noac_ops\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1816398_e1822184_b33729_c20180502002220226...\n      POLYGON ((93.99790 16.00210, 93.99790 41.00210, 130.99800 41.00210, 130.99800 16.00210, 93.99790 16.00210))\n    \n    \n      90\n      ./SVDNB_npp_d20180501_t1822196_e1828000_b33729_c20180502002801307723_noac_ops.rade9.co.json\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1822196_e1828000_b33729_c20180502002801307...\n      SVDNB_npp_d20180501_t1822196_e1828000_b33729_c20180502002801307723_noac_ops\n      rade9.co.json\n      https://globalnightlight.s3.amazonaws.com\n      npp_201805\n      SVDNB_npp\n      20180501\n      1822196\n      1828000\n      33729\n      20180502002801307723\n      noac\n      ops\n      npp_d20180501_t1822196_e1828000_b33729.vflag.co.tif\n      https://globalnightlight.s3.amazonaws.com/npp_201805/npp_d20180501_t1822196_e1828000_b33729.vflag.co.tif\n      SVDNB_npp_d20180501_t1822196_e1828000_b33729_c20180502002801307723_noac_ops\n      https://globalnightlight.s3.amazonaws.com/npp_201805/SVDNB_npp_d20180501_t1822196_e1828000_b33729_c20180502002801307...\n      POLYGON ((89.99790 -2.99794, 89.99790 22.00210, 122.99800 22.00210, 122.99800 -2.99794, 89.99790 -2.99794))\n    \n  \n\n\n\n\nOne way to answer the question is by taking the amount of overlap each image makes over the AOI and sorts them from the highest to the lowest.\n\nsorted_results = compute_overlaps(aoi,matched)\n\nCPU times: user 73.3 ms, sys: 0 ns, total: 73.3 ms\nWall time: 69.9 ms\n\n\n\nsorted_results[['pct_covered']].head()\n\n\n\n\n\n  \n    \n      \n      pct_covered\n    \n  \n  \n    \n      81\n      0.860461\n    \n    \n      90\n      0.707395\n    \n    \n      89\n      0.317353\n    \n    \n      80\n      0.081804\n    \n    \n      82\n      0.024449\n    \n  \n\n\n\n\nBased on the pct_covered it looks like the first 2 are good candidates to hold relevant data over the AOI\n\naoi_ph = gpd.read_file('../data/admin_areas/phl_admbnda_adm3_psa_namria_20200529.shp')\naoi_ph_planar = aoi_ph.to_crs('EPSG:3857')\nax = plt.axes()\nax = sorted_results[:2].plot(ax=ax, facecolor='none', edgecolor='blue')\nax = aoi_ph_planar.plot(ax=ax,color='red')\n\n\n\n\nSo the results do look good for the top 2 areas as between them, they cover the entire AOI.\nNow, lets download the relevant images\n\ntop2_items = sorted_results[:2].copy()\n\n\ntop2_items = download_items(top2_items, dest='../data/ntlights-bigfiles')\n\nCPU times: user 7.02 ms, sys: 1.55 ms, total: 8.57 ms\nWall time: 6.76 ms\n\n\nNotice how fast the times are\n\nthis is because the files were already downloaded into the directory – the time taken to download new files can take about 10-15 minutes depending on your internet connection\n\n\ntop2_items[['image_path']]\n\n\n\n\n\n  \n    \n      \n      image_path\n    \n  \n  \n    \n      81\n      /home/butch2/play/devpost/ntlights-damage-assessment/nbs/../data/ntlights-bigfiles/npp_201805/SVDNB_npp_d20180501_t1...\n    \n    \n      90\n      /home/butch2/play/devpost/ntlights-damage-assessment/nbs/../data/ntlights-bigfiles/npp_201805/SVDNB_npp_d20180501_t1...\n    \n  \n\n\n\n\nThese now display the path to image files – which you can then open for analysis using rasterio or any other python package."
  },
  {
    "objectID": "06_initial_notes.html",
    "href": "06_initial_notes.html",
    "title": "Initial Notes",
    "section": "",
    "text": "AWS ASDI light every night\n\nAWS Marketplace Entry\naws s3 ls --no-sign-request s3://globalnightlight/\nasdi-globalnightlight-catalog.txt\nwb-light-every-night-readme VIIRS DNB\nOpen Night Lights tutorial\nIntro to night time lights data analysis\nStac 1.0.0-beta.2 endpoint\n\nTropical Cyclone “Mangkhut” - Philippine name “Ompong”\n\n2018/09/12 - Entered Philippine Area of Responsibility (PAR)\n2018/09/15 - left PAR\nSitrep - source : (retrieved Aug 20, 2022) https://ndrrmc.gov.ph/attachments/article/3437/Sitrep_No_55_re_Preparedness_Measures_and_Effects_for_TY_OMPONG_as_of_05OCT2018_0600H.pdf"
  },
  {
    "objectID": "06_initial_notes.html#next-plans",
    "href": "06_initial_notes.html#next-plans",
    "title": "Initial Notes",
    "section": "Next Plans",
    "text": "Next Plans\n\nGet admin areas for affected areas of TC Ompong - AOI\nGrab nightlights data for 20180912 (Date of entry of “Mangkhut” into par)\n\ngrab ’*.rade9.co.json’ for all data in s3://globalnightlight/npp_201809\nparse ’*.rade9.co.json’ and convert to geojson\nfind files intersecting affected areas of TC Ompong -\nfetch files ’*.rade9.co.tif’ for files intersecting AOI\nfetch files ’*.vflag.co.tif’ to mask for no data/cloud cover.\ncheck if there is enough data for analysis – no data < 5 percent\n\nRepeat process for 20180916 (Date of exit of “Mankhut” from par)\nCompare variance of nightlights over AOI"
  },
  {
    "objectID": "items.html",
    "href": "items.html",
    "title": "Items",
    "section": "",
    "text": "catalog1805 = catalogs[catalogs.yearmonth == '201805']\n\n\nhref1805 = catalog1805.iloc[0].href; href1805\n\n'https://globalnightlight.s3.amazonaws.com/npp_201805/npp_201805_catalog.json'\n\n\n\nbaseurl = catalog1805.iloc[0].baseurl; baseurl\n\n'https://globalnightlight.s3.amazonaws.com'\n\n\n\nfolder1805 = catalog1805.iloc[0].folder; folder1805\n\n'npp_201805'\n\n\n\ndata1805 = get_data(href1805)\n\nCPU times: user 64.7 ms, sys: 6.24 ms, total: 71 ms\nWall time: 2.44 s\n\n\n\ndf1805 = make_df(data1805,rel='item')\n\n\n\nget_item_href\n\n get_item_href (href, folder, baseurl)\n\n\nassert get_item_href('./SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops.rade9.co.json',\n              '201805',\n              'https://globalnightlight.s3.amazonaws.com') == 'https://globalnightlight.s3.amazonaws.com/201805/SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops.rade9.co.json'\n\n\n\n\nsplit_href_type\n\n split_href_type (href, first=True)\n\n\nassert split_href_type('./SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops.rade9.co.json') == 'SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops'\n\n\nassert split_href_type('./SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops.rade9.co.json', first=False) == 'rade9.co.json'\n\n\n\n\ntransform_items_df\n\n transform_items_df (items_df, folder, baseurl)\n\n\nitems_df = pd.DataFrame(\n    data=dict(rel=['item'],\n              type=['application/json'],\n              href=['./SVDNB_npp_d20180501_t0004098_e0009502_b33718_c20180501060951522600_noac_ops.rade9.co.json']\n             ))\n\n\nitems_df = transform_items_df(items_df,'201805','https://globalnightlight.s3.amazonaws.com')\n\n\nassert set(['base_url', 'folder', 'href', 'item_href', 'stem', 'suffix']) == set(items_df.columns.values)\n\n\n\n\nfind_stem_components\n\n find_stem_components (stem)\n\n\nassert find_stem_components('SVDNB_npp_d20180901_t0002302_e0008088_b35463_c20180901040811139620_nobc_ops') == ['SVDNB_npp',\n '20180901',\n '0002302',\n '0008088',\n '35463',\n '20180901040811139620',\n 'nobc',\n 'ops']\n\n\n\n\nmake_vflag_file\n\n make_vflag_file (o)\n\n\nitems_df2 = pd.DataFrame(dict(start_date=['20150504'], first_scantime=['1335358'], end_scantime=['1341162'], orbital_nbr=['18219']))\n\n\nassert (items_df2.apply(make_vflag_file,axis=1) == pd.Series(['npp_d20150504_t1335358_e1341162_b18219.vflag.co.tif'])).all(axis=None)\n\n\n\n\nmake_vflag_href\n\n make_vflag_href (o)\n\n\nitems_df3 = pd.DataFrame(dict(base_url=['https://globalnightlight.s3.amazonaws.com'], folder=['npp_201504'], vflag_file=['npp_d20150504_t1335358_e1341162_b18219.vflag.co.tif']))\n\n\nassert (items_df3.apply(make_vflag_href, axis=1) == pd.Series(['https://globalnightlight.s3.amazonaws.com/npp_201504/npp_d20150504_t1335358_e1341162_b18219.vflag.co.tif'])).all(axis=None)\n\n\n\n\nsplit_stem_components\n\n split_stem_components (df)\n\n\nitems_df4 = pd.DataFrame(\n    dict(stem=['SVDNB_npp_d20180901_t0002302_e0008088_b35463_c20180901040811139620_nobc_ops'],\n         base_url=['https://globalnightlight.s3.amazonaws.com'], \n         folder=['npp_201809']\n         ))\n\n\nitems_df4 = split_stem_components(items_df4)\n\n\nassert set(items_df4.columns.values) == set([\n 'base_url',\n 'create_datetime',\n 'data_domain',\n 'data_origin',\n 'end_scantime',\n 'first_scantime',\n 'folder',\n 'orbital_nbr',\n 'product_id',\n 'start_date',\n 'stem',\n 'vflag_file',\n 'vflag_href'])\n\n\n\n\nget_monthly_items\n\n get_monthly_items (href, folder, baseurl)\n\n\nitems1805 = get_monthly_items(href1805,folder1805, baseurl)\n\nCPU times: user 177 ms, sys: 7.41 ms, total: 184 ms\nWall time: 2.59 s\n\n\n\nassert len(items1805) == 3600\n\n\nassert set(items1805.columns.values) == set(['href','item_href','suffix', *items_df4.columns.values])"
  }
]