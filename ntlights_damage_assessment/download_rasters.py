# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/05_download_rasters.ipynb.

# %% auto 0
__all__ = ['RASTER_TYPES', 'PATH_COLUMNS', 'get_path_column', 'get_href_path', 'download_path_column', 'download_items']

# %% ../nbs/05_download_rasters.ipynb 4
import requests
import json
from fastcore.all import L
import pandas as pd
from typing import Any
from urllib.parse import urlparse
from pathlib import Path
import numpy as np
import re
from shapely.geometry import Polygon, box
from shapely import wkt
import geopandas as gpd
import sqlite3 as sql3
from pandas.io import sql 
import sqlalchemy as sqalc
import geowrangler.area_zonal_stats as azs
from fastdownload import FastDownload
from fastcore.foundation import Config
from functools import partial

# %% ../nbs/05_download_rasters.ipynb 5
from ntlights_damage_assessment.fetch_coords import search_dates_aoi 
from ntlights_damage_assessment.eval_overlap import compute_overlaps

# %% ../nbs/05_download_rasters.ipynb 7
RASTER_TYPES = [
    'rade9.co.tif',
    'vflag.co.tif',
    'rad.co.tif',
    'samples.co.tif',
    'li.co.tif']

# %% ../nbs/05_download_rasters.ipynb 13
PATH_COLUMNS = {
    'rade9.co.tif':'image_path',
    'vflag.co.tif':'vflag_path',
    'rad.co.tif':'rad_path',
    'samples.co.tif':'samples_path',
    'li.co.tif':'li_path'
}
def get_path_column(raster_type):
    return PATH_COLUMNS[raster_type]
    

# %% ../nbs/05_download_rasters.ipynb 14
def get_href_path(o, raster_type):
    if raster_type == 'rade9.co.tif':
        return o.asset_href
    elif raster_type == 'vflag.co.tif':
        return o.vflag_href
    else:
        return f'{o.base_url}/{o.folder}/{o.stem}.{raster_type}'

# %% ../nbs/05_download_rasters.ipynb 15
def download_path_column(o, raster_type, dest):
    cfg = Config(dest,'ntlights.ini', save=False)
    fdownload = FastDownload(cfg,base=dest,archive=o.folder)
    url = get_href_path(o, raster_type)
    return fdownload.download(url)
    

# %% ../nbs/05_download_rasters.ipynb 16
def download_items(items_df,dest='data', raster_type='rade9.co.tif'):
    if raster_type not in RASTER_TYPES:
        raise ValueError(f'Unknown raster_type: {raster_type}, valid values are {RASTER_TYPES}')
    path_column = get_path_column(raster_type) 
    download_func = partial(download_path_column, raster_type=raster_type, dest=dest)
    items_df[path_column] = items_df.apply(download_func, axis=1)
    return items_df
                         
