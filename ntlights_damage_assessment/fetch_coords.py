# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_fetch_coords.ipynb.

# %% auto 0
__all__ = ['get_coords', 'get_rows', 'add_cache_coords', 'fetch_cached_coordinates', 'search_and_cache_dates',
           'convert_joined_gdf', 'search_dates_aoi']

# %% ../nbs/03_fetch_coords.ipynb 4
import requests
import json
from fastcore.all import L
import pandas as pd
from typing import Any
from urllib.parse import urlparse
from pathlib import Path
import numpy as np
import re
from shapely.geometry import Polygon, box
from shapely import wkt
import geopandas as gpd
import sqlite3 as sql3
from pandas.io import sql 
import sqlalchemy as sqalc

# %% ../nbs/03_fetch_coords.ipynb 5
from ntlights_damage_assessment.build_catalogs import DB
from ntlights_damage_assessment.catalogs import get_data

# %% ../nbs/03_fetch_coords.ipynb 8
def get_coords(href, stem):
    data = get_data(href)
    shape = Polygon(data['geometry']['coordinates'][0])
    asset_href = data['assets']['image']['href']
    row = dict(
        stem=stem,
        asset_href=data['assets']['image']['href'],
        geometry=shape
    )
    return row

# %% ../nbs/03_fetch_coords.ipynb 19
def get_rows(items_df):
    rows = []
    for i in range(len(items_df)):
        item = items_df.iloc[i]
        row = get_coords(item.item_href, item.stem)
        rows.append(row) 
    return rows

# %% ../nbs/03_fetch_coords.ipynb 27
create_coords_cache_sql = '''
CREATE TABLE IF NOT EXISTS "coords_cache" (
  "stem" TEXT,
  "asset_href" TEXT,
  "geometry" TEXT
);
CREATE INDEX cache_index on coords_cache(stem);
'''
drop_coords_cache_sql = '''
DROP TABLE IF EXISTS coords_cache;
'''


# %% ../nbs/03_fetch_coords.ipynb 31
def add_cache_coords(items_df, cache_table='coords_cache'):
    rows = get_rows(items_df)
    rows_df = pd.DataFrame.from_records(rows)
    rows_gdf = gpd.GeoDataFrame(rows_df, geometry='geometry', crs='EPSG:4326')
    rows_wkt  = rows_gdf.to_wkt()
    conn = sql3.connect(DB)
    row_count = rows_wkt.to_sql(cache_table, conn, if_exists='append', index=False, method='multi')
    conn.close()
    return row_count

# %% ../nbs/03_fetch_coords.ipynb 32
joined_query_template = '''
with item as ( 
  select *
  from catalog_items
),
cache as (
  select *
  from coords_cache
),
item_cache as (
  select item.*,
         ifnull(cache.stem,'NA') as cache_stem,
         cache.asset_href,
         cache.geometry
  from item
  left join cache
  on item.stem = cache.stem
)
select * from item_cache
where {}
'''
  

# %% ../nbs/03_fetch_coords.ipynb 33
def fetch_cached_coordinates(date_param=None, criteria=None):
    if criteria is not None:
        pass
    elif date_param is None:
        raise ValueError('date_param and criteria cannot both be None')
    elif '%' in date_param:
        criteria = f'start_date like "{date_param}"'
    else:
        criteria = f'start_date = "{date_param}"' 
    joined_query = joined_query_template.format(criteria)

    conn = sql3.connect(DB)
    joined_df = pd.read_sql_query(joined_query, conn, dtype=str)
    conn.close()
    return joined_df

# %% ../nbs/03_fetch_coords.ipynb 38
def search_and_cache_dates(date_param=None, criteria=None):
    joined_df = fetch_cached_coordinates(date_param=date_param,criteria=criteria)
    uncached = joined_df[joined_df.cache_stem == 'NA']
    if len(uncached) > 0:
        add_cache_coords(uncached) # add missing uncached entries -- can be slow
        joined_df = fetch_cached_coordinates(date_param=date_param, criteria=criteria) 
    return joined_df

# %% ../nbs/03_fetch_coords.ipynb 40
def convert_joined_gdf(joined_df, crs='EPSG:4326'):
    joined_df['geometry'] = joined_df.geometry.apply(wkt.loads)
    joined_gdf = gpd.GeoDataFrame(joined_df, geometry='geometry', crs=crs)
    return joined_gdf

# %% ../nbs/03_fetch_coords.ipynb 46
def search_dates_aoi(aoi:gpd.GeoDataFrame, 
                    date_param:str=None, 
                    criteria:str=None, 
                    crs='EPSG:4326'):
    joined_df = search_and_cache_dates(date_param=date_param, criteria=criteria)
    joined_gdf = convert_joined_gdf(joined_df, crs=crs)
    filtered_gdf = joined_gdf.sjoin(aoi[['geometry']],how='inner',predicate='intersects')
    filtered_gdf.drop(columns='index_right',inplace=True)
    return filtered_gdf
