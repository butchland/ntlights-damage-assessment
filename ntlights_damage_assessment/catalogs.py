# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_catalogs.ipynb.

# %% auto 0
__all__ = ['VIIRS_LINK', 'get_data', 'make_df', 'parse_folder', 'parse_yearmonth', 'parse_baseurl', 'transform_kids_df',
           'get_item_catalogs']

# %% ../nbs/00_catalogs.ipynb 4
import requests
import json
from fastcore.all import L
import pandas as pd
from typing import Any
from urllib.parse import urlparse
from pathlib import Path
import numpy as np
import re
from shapely.geometry import Polygon, box
import geopandas as gpd

# %% ../nbs/00_catalogs.ipynb 6
VIIRS_LINK = 'https://globalnightlight.s3.amazonaws.com/VIIRS_npp_catalog.json'

# %% ../nbs/00_catalogs.ipynb 7
def get_data(url: str, 
             headers: dict = {}) -> Any:
    resp = requests.get(url, headers=headers)
    if resp.status_code == 200:
        dat = resp.text
    else:
        raise ValueError(f'Unable to open {url}')
    return json.loads(dat)

# %% ../nbs/00_catalogs.ipynb 10
def make_df(data, rel):
    links = L(data['links'])
    kids = links.filter(lambda o: o['rel'] == rel)
    kids_df = pd.DataFrame.from_records(kids)
    return kids_df

# %% ../nbs/00_catalogs.ipynb 14
def parse_folder(href):
    urlparts = urlparse(href)
    urlpath = Path(urlparts.path)
    return urlpath.parts[1]


# %% ../nbs/00_catalogs.ipynb 16
def parse_yearmonth(folder):
    return folder[4:] if folder.startswith('npp_') else folder

# %% ../nbs/00_catalogs.ipynb 18
def parse_baseurl(href):
    urlparts = urlparse(href)
    return f'{urlparts.scheme}://{urlparts.netloc}'

# %% ../nbs/00_catalogs.ipynb 20
def transform_kids_df(kids_df):
    kids_df.drop(columns=['rel','type'], inplace=True)
    kids_df['folder'] = kids_df.href.apply(parse_folder)
    kids_df['baseurl'] = kids_df.href.apply(parse_baseurl) 
    kids_df['yearmonth'] = kids_df.folder.apply(parse_yearmonth)
    return kids_df

# %% ../nbs/00_catalogs.ipynb 23
def get_item_catalogs(link:str=None, 
                      rel:str='child') -> pd.DataFrame:
    link = VIIRS_LINK if link is None else link
    data = get_data(link)
    kids_df = make_df(data, rel)
    kids_df = transform_kids_df(kids_df)
    return kids_df
